Get something reasonable in place for testing with MySQL and Postgres.

Read and convert results lazily if a connection is available. (Not sure what exactly "available" should mean. Maybe pass in an option to force.)

Allow update to be called with nil values. (Should be a patch to clojure.contrib.sql I think.)

More callbacks.

:stop-if-invalid to abort early inside (:validation ...) form.
  * Not sure that makes the most sense ... maybe multiple validations hanging off one attribute would be better.

Eager fetching of associations.

(io!) bomb if any database work is attempted in a dosync block?
  * Gilardi has added this to sql/transaction.

Create lazy seqs for multi-value associations?
  Would like to do lazy singular associations too ... not sure what that can look like.

Pretty migrations. Maybe just a series of contributions to clojure.contrib.sql.

Figure out a way to test init-model options without putting every bizarre case into manufacturer. It's getting ridiculous.
  * This is somewhat addressed now that init-model is side-effect free and tests can 
    directly use the expanded forms of options, then restore the model metadata when they're finished.
    It's a bit complicated though.

Support for BLOBs, CLOBs.

TODONE

Get tests out of the main src folder so we don't accidentally rely on having the uncompiled production source on the classpath when running tests.

"Serialization" of data structures as attribute values.
  * Use this http://groups.google.com/group/clojure/msg/e21bf475b45bd2d5

Generate fancier queries with some fancy query API.
  * http://gist.github.com/64357

Support specifying (not inferring):
  * model-name of an association
  * foreign-key column name
